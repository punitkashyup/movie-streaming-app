name: Initialize Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to initialize'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TF_VERSION: '1.5.7'
  AWS_REGION: 'us-east-1'

jobs:
  setup-remote-state:
    name: 'Setup Remote State'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Create S3 bucket for Terraform state
    - name: Create S3 bucket for Terraform state
      run: |
        BUCKET_NAME="${{ secrets.PROJECT_NAME }}-terraform-state"
        
        # Check if bucket exists
        if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
          echo "Bucket $BUCKET_NAME already exists"
        else
          echo "Creating bucket $BUCKET_NAME"
          aws s3api create-bucket \
            --bucket $BUCKET_NAME \
            --region ${{ env.AWS_REGION }} \
            --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}
          
          # Enable versioning
          aws s3api put-bucket-versioning \
            --bucket $BUCKET_NAME \
            --versioning-configuration Status=Enabled
          
          # Enable encryption
          aws s3api put-bucket-encryption \
            --bucket $BUCKET_NAME \
            --server-side-encryption-configuration '{
              "Rules": [
                {
                  "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            }'
          
          # Block public access
          aws s3api put-public-access-block \
            --bucket $BUCKET_NAME \
            --public-access-block-configuration '{
              "BlockPublicAcls": true,
              "IgnorePublicAcls": true,
              "BlockPublicPolicy": true,
              "RestrictPublicBuckets": true
            }'
        fi
        
        # Set as GitHub secret
        echo "TF_STATE_BUCKET=$BUCKET_NAME" >> $GITHUB_ENV

    # Create DynamoDB table for state locking
    - name: Create DynamoDB table for state locking
      run: |
        TABLE_NAME="${{ secrets.PROJECT_NAME }}-terraform-locks"
        
        # Check if table exists
        if aws dynamodb describe-table --table-name $TABLE_NAME 2>/dev/null; then
          echo "Table $TABLE_NAME already exists"
        else
          echo "Creating table $TABLE_NAME"
          aws dynamodb create-table \
            --table-name $TABLE_NAME \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
        fi
        
        # Set as GitHub secret
        echo "TF_LOCK_TABLE=$TABLE_NAME" >> $GITHUB_ENV
        
    # Create ECR repository for backend
    - name: Create ECR repository
      run: |
        REPO_NAME="${{ secrets.PROJECT_NAME }}-backend"
        
        # Check if repository exists
        if aws ecr describe-repositories --repository-names $REPO_NAME 2>/dev/null; then
          echo "Repository $REPO_NAME already exists"
        else
          echo "Creating repository $REPO_NAME"
          aws ecr create-repository \
            --repository-name $REPO_NAME \
            --image-scanning-configuration scanOnPush=true
        fi
        
    # Update GitHub secrets
    - name: Update GitHub secrets
      uses: gliech/create-github-secret-action@v1
      with:
        name: TF_STATE_BUCKET
        value: ${{ env.TF_STATE_BUCKET }}
        pa_token: ${{ secrets.GH_PA_TOKEN }}
        
    - name: Update GitHub secrets for lock table
      uses: gliech/create-github-secret-action@v1
      with:
        name: TF_LOCK_TABLE
        value: ${{ env.TF_LOCK_TABLE }}
        pa_token: ${{ secrets.GH_PA_TOKEN }}
